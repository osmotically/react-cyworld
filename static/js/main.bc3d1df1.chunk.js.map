{"version":3,"sources":["UserInfo.tsx","CyworldMiniHomeLatestPost.tsx","CyworldMiniHome.tsx","CyworldLogin.tsx","CyworldMain.tsx","serviceWorker.ts","index.tsx"],"names":["UserInfo","createContext","CyworldMiniHomeLatestPost","useState","loading","setLoading","posts","setposts","useEffect","length","FB","api","response","data","postMessages","map","post","String","message","size","title","bordered","dataSource","renderItem","Item","CyworldMiniHome","useContext","description","type","showIcon","CyworldLogin","props","userInfo","onClick","setUserInfo","appId","autoLoad","fields","scope","callback","Content","Layout","Footer","Sider","CyworldMain","collapsed","setCollapsed","menu","setMenu","content","Provider","value","console","log","style","minHeight","collapsible","onCollapse","theme","e","key","defaultSelectedKeys","mode","margin","icon","UserOutlined","src","picture","url","name","HomeOutlined","LoginOutlined","LogoutOutlined","className","padding","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bc3d1df1.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\nexport const UserInfo = createContext<ReactFacebookLoginInfo | null>(null);","import React, { useState, useEffect } from 'react';\r\nimport { Card, List } from 'antd';\r\n\r\ntype FBPostInfo = { message: string, id: string };\r\n\r\nfunction CyworldMiniHomeLatestPost() {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [posts, setposts] = useState<Array<FBPostInfo>>([]);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (posts.length === 0) {\r\n      FB.api(\r\n        '/me/posts',\r\n        'get',\r\n        { \"fields\": \"message\", \"limit\": \"10\" },\r\n        function (\r\n          response: {\r\n            data: Array<FBPostInfo>,\r\n            page: { next: string, previous: string },\r\n          },\r\n        ) {\r\n          setposts(response?.data ?? []);\r\n        }\r\n      );\r\n    }\r\n    setLoading(false);\r\n  }, [posts]);\r\n\r\n  const postMessages = posts.map(\r\n    post => String(post?.message),\r\n  );\r\n\r\n  return (\r\n    <Card size=\"small\" title=\"Latest Article(s)\">\r\n      <List\r\n        size=\"small\"\r\n        loading={loading}\r\n        bordered\r\n        dataSource={postMessages}\r\n        renderItem={message => <List.Item>{message}</List.Item>}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLatestPost;","import React, { useContext } from 'react';\r\nimport { UserInfo } from './UserInfo';\r\nimport { Alert } from 'antd';\r\nimport CyworldMiniHomeLatestPost from './CyworldMiniHomeLatestPost';\r\n\r\nfunction CyworldMiniHome() {\r\n    const userInfo = useContext(UserInfo);\r\n    if (userInfo === null) {\r\n        return <Alert\r\n            message=\"Sign In\"\r\n            description=\"Please sign in to your information in your homepage.\"\r\n            type=\"error\"\r\n            showIcon\r\n        />;\r\n    }\r\n    return (\r\n        <>\r\n            <CyworldMiniHomeLatestPost />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CyworldMiniHome;","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport FacebookLogin, { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\ntype Props = {\r\n  userInfo: ReactFacebookLoginInfo | null,\r\n  setUserInfo: (userInfo: ReactFacebookLoginInfo | null) => void,\r\n};\r\n\r\nfunction CyworldLogin(props: Props) {\r\n  const loginCallback = (userInfo: ReactFacebookLoginInfo) => {\r\n    props.setUserInfo(userInfo);\r\n  };\r\n\r\n  if (props.userInfo !== null) {\r\n    return (\r\n      <Button type=\"dashed\" onClick={() => { props.setUserInfo(null) }}>Log Out</Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FacebookLogin\r\n      appId=\"2600949710193273\"\r\n      autoLoad={false}\r\n      size=\"small\"\r\n      fields=\"name,picture\"\r\n      scope=\"public_profile,user_posts\"\r\n      callback={loginCallback}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CyworldLogin;\r\n","import React, { useState } from 'react';\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\nimport './App.css';\nimport { UserInfo } from './UserInfo';\nimport { Avatar, Layout, Menu } from 'antd';\nimport {\n  HomeOutlined,\n  UserOutlined,\n  LoginOutlined,\n  LogoutOutlined,\n} from '@ant-design/icons';\nimport CyworldMiniHome from './CyworldMiniHome';\nimport CyworldLogin from './CyworldLogin';\n\nconst { Content, Footer, Sider } = Layout;\n\nfunction CyworldMain() {\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  const [menu, setMenu] = useState<string>('homepage');\n  const [userInfo, setUserInfo] = useState<ReactFacebookLoginInfo | null>(null);\n\n  let content = (\n    <UserInfo.Provider value={userInfo} >\n      <CyworldMiniHome />\n    </UserInfo.Provider>\n  );\n  if (menu === 'login') {\n    content = (\n      <CyworldLogin userInfo={userInfo} setUserInfo={setUserInfo} />\n    );\n  }\n  console.log(collapsed);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n        <Menu theme=\"dark\" onClick={(e) => setMenu(e.key)} defaultSelectedKeys={['homepage']} mode=\"inline\" >\n          <div style={{ margin: '16px' }}>\n            {userInfo === null ?\n              <Avatar icon={<UserOutlined />} style={{ margin: '0 8px' }} /> :\n              <Avatar src={String(userInfo?.picture?.data?.url)} style={{ margin: '0 8px' }} />}\n            {!collapsed && `${userInfo === null ? 'Please sign in' : userInfo?.name}`}\n          </div>\n          <Menu.Item key=\"homepage\" icon={<HomeOutlined />}>\n            Mini Homepage\n          </Menu.Item>\n          <Menu.Item key=\"login\" icon={userInfo === null ? <LoginOutlined /> : <LogoutOutlined />}>\n            {`Sign ${userInfo === null ? 'In' : 'Out'}`}\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Content style={{ margin: '0 16px' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n            {content}\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Created by Osmotically</Footer>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default CyworldMain;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport CyworldMain from './CyworldMain';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CyworldMain />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}