{"version":3,"sources":["UserInfo.tsx","enum/CyworldNav.tsx","CyworldMiniHomeTitle.tsx","CyworldMiniHomeToday.tsx","CyworldMiniHomeLeftPanelPicture.tsx","CyworldMiniHomeLefPanelTodayIs.tsx","CyworldMiniHomeLeftPanelIntro.tsx","CyworldMiniHomeLeftPanel.tsx","CyworldMiniHomeLatestPost.tsx","CyworldMiniHome.tsx","CyworldLogin.tsx","CyworldMain.tsx","serviceWorker.ts","index.tsx"],"names":["UserInfo","createContext","CyworldNavItem","LOGIN","HOMEPAGE","PRIVACY","CyworldMiniHomeTitle","style","color","fontSize","href","position","right","bottom","CyworldMiniHomeToday","textAlign","width","marginRight","CyworldMiniHomeLeftPanelPicture","useState","loading","setLoading","pictureURI","setPictureURI","useEffect","FB","api","response","String","data","url","alt","src","CyworldMiniHomeLefPanelTodayIs","border","borderRadius","backgroundColor","padding","marginBottom","fontWeight","LikeOutlined","CyworldMiniHomeLeftPanelIntro","intro","setIntro","name","gender","birthday","email","CyworldMiniHomeLeftPanel","marginTop","dashed","CyworldMiniHomeLatestPost","posts","setposts","getTagColorByPostType","postType","length","size","title","bordered","dataSource","renderItem","post","Item","key","id","type","message","CyworldMiniHome","useContext","description","showIcon","gutter","span","minHeight","CyworldLogin","props","userInfo","onClick","setUserInfo","appId","autoLoad","fields","scope","textButton","callback","Content","Layout","Footer","Sider","CyworldMain","params","URLSearchParams","window","location","search","collapsed","setCollapsed","get","menu","setMenu","content","Provider","value","collapsible","onCollapse","theme","e","set","history","replaceState","pathname","defaultSelectedKeys","mode","margin","icon","UserOutlined","picture","HomeOutlined","WarningOutlined","LoginOutlined","LogoutOutlined","className","backgroundSize","backgroundImage","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3f71a06c.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\nexport const UserInfo = createContext<ReactFacebookLoginInfo | null>(null);","const CyworldNavItem = {\r\n  LOGIN: 'login',\r\n  HOMEPAGE: 'homepage',\r\n  PRIVACY: 'privacy',\r\n};\r\n\r\nexport default CyworldNavItem;","import React from 'react';\r\n\r\nfunction CyworldMiniHomeTitle() {\r\n  // Replace this title with the server side string\r\n  const title = 'Edit your own title later!';\r\n  return (\r\n    <>\r\n      <span style={{ color: 'orange', fontSize: '2em' }}>{title}</span>\r\n      <a href=\"/#\" style={{ color: 'grey', fontSize: '12px', position: 'absolute', right: '2%', bottom: '1%' }}>\r\n        https://osmotically.github.io/react-cyworld/\r\n      </a>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeTitle;","import React from 'react';\r\n\r\nfunction CyworldMiniHomeToday() {\r\n  // Replace these conts with server side numbers\r\n  const todayVisit = 0;\r\n  const totalVisit = 9999;\r\n  return (\r\n    <div style={{ textAlign: 'center', width: '100%', position: 'absolute', bottom: '0' }}>\r\n      <span style={{ marginRight: '4px' }}>TODAY</span>\r\n      <span style={{ marginRight: '4px', color: 'red' }}>{todayVisit}</span>\r\n      {`| TOTAL ${totalVisit}`}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeToday;","import React, { useState, useEffect } from 'react';\r\nimport { Spin } from 'antd';\r\n\r\ntype ProfileInfo = { data: { height: number, url: string, width: number } };\r\n\r\nfunction CyworldMiniHomeLeftPanelPicture() {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [pictureURI, setPictureURI] = useState<string>('');\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (pictureURI === '') {\r\n      FB.api(\r\n        '/me/picture',\r\n        'get',\r\n        { \"height\": \"320\", \"redirect\": \"false\" },\r\n        function (response: ProfileInfo) {\r\n          setPictureURI(String(response?.data?.url));\r\n        }\r\n      );\r\n    }\r\n    setLoading(false);\r\n  }, [pictureURI]);\r\n\r\n  return (\r\n    loading ? <Spin /> : <img alt=\"profile_pic\" src={pictureURI} />\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLeftPanelPicture;","import React from 'react';\r\nimport { LikeOutlined } from '@ant-design/icons';\r\n\r\nfunction CyworldMiniHomeLefPanelTodayIs() {\r\n  const todayIsMessage = '최고에요';\r\n\r\n  return (\r\n    <div style={{ border: '1px solid #cbcbcb', borderRadius: '8px', backgroundColor: 'white', padding: '4px 20px', marginBottom: '4px' }}>\r\n      <span style={{ marginRight: '8px', color: '#229ed0', fontWeight: 'bold' }}>TODAY IS..</span>\r\n      <LikeOutlined />\r\n      {todayIsMessage}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLefPanelTodayIs;","import React, { useState, useEffect } from 'react';\r\nimport { Spin } from 'antd';\r\n\r\ntype IntroInfo = { birthday: string, gender: string, email: string, name: string };\r\n\r\nfunction CyworldMiniHomeLeftPanelIntro() {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [intro, setIntro] = useState<IntroInfo | null>(null);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (intro === null) {\r\n      FB.api(\r\n        '/me',\r\n        'get',\r\n        { \"fields\": \"birthday,gender, email, name\" },\r\n        function (\r\n          response: IntroInfo,\r\n        ) {\r\n          setIntro(response);\r\n        }\r\n      );\r\n    }\r\n    setLoading(false);\r\n  }, [intro]);\r\n\r\n  return (\r\n    loading ?\r\n      <Spin /> :\r\n      <>\r\n        <p style={{ marginBottom: '2px' }}>\r\n          <span style={{ color: 'blue', fontWeight: 'bold', marginRight: '4px' }}>{intro?.name}</span>\r\n          <span style={{ color: 'grey', fontSize: 'small' }}>{`(${intro?.gender === 'male' ? '♂' : '♀'}) ${intro?.birthday}`} </span>\r\n        </p>\r\n        <p style={{ color: 'orange', fontSize: 'small' }}>{intro?.email}</p>\r\n      </>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLeftPanelIntro;","import React from 'react';\r\nimport CyworldMiniHomeLeftPanelPicture from './CyworldMiniHomeLeftPanelPicture';\r\nimport CyworldMiniHomeLefPanelTodayIs from './CyworldMiniHomeLefPanelTodayIs';\r\nimport CyworldMiniHomeLeftPanelIntro from './CyworldMiniHomeLeftPanelIntro';\r\nimport { Divider } from 'antd';\r\n\r\nfunction CyworldMiniHomeLeftPanel() {\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <CyworldMiniHomeLeftPanelPicture />\r\n      <Divider style={{ marginTop: '12px', marginBottom: '4px' }} dashed />\r\n      <CyworldMiniHomeLefPanelTodayIs />\r\n      <CyworldMiniHomeLeftPanelIntro />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLeftPanel;","import React, { useState, useEffect } from 'react';\r\nimport { Card, List, Tag } from 'antd';\r\n\r\ntype PostInfo = { message: string, type: string, id: string };\r\n\r\nfunction CyworldMiniHomeLatestPost() {\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [posts, setposts] = useState<Array<PostInfo>>([]);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    if (posts.length === 0) {\r\n      FB.api(\r\n        '/me/posts',\r\n        'get',\r\n        { \"fields\": \"message, type\", \"limit\": \"10\" },\r\n        function (\r\n          response: {\r\n            data: Array<PostInfo>,\r\n            page: { next: string, previous: string },\r\n          },\r\n        ) {\r\n          setposts(response?.data ?? []);\r\n        }\r\n      );\r\n    }\r\n    setLoading(false);\r\n  }, [posts]);\r\n\r\n  // Put this in a seperate util js if needed\r\n  function getTagColorByPostType(postType: String): String {\r\n    switch (postType) {\r\n      case 'status':\r\n        return 'magenta';\r\n      case 'link':\r\n        return 'blue';\r\n      case 'photo':\r\n        return 'gold';\r\n      case 'video':\r\n        return 'purple';\r\n      default:\r\n        return 'cyan';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card size=\"small\" title=\"Updated news\">\r\n      <List\r\n        size=\"small\"\r\n        loading={loading}\r\n        bordered\r\n        dataSource={posts}\r\n        renderItem={post =>\r\n          <List.Item key={post?.id}>\r\n            <Tag color={String(getTagColorByPostType(post?.type))}>{post?.type}</Tag>\r\n            {post?.message}\r\n          </List.Item>\r\n        }\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CyworldMiniHomeLatestPost;","import React, { useContext } from 'react';\r\nimport { UserInfo } from './UserInfo';\r\nimport { Alert, Col, Row } from 'antd';\r\nimport CyworldMiniHomeTitle from './CyworldMiniHomeTitle';\r\nimport CyworldMiniHomeToday from './CyworldMiniHomeToday';\r\nimport CyworldMiniHomeLeftPanel from './CyworldMiniHomeLeftPanel';\r\nimport CyworldMiniHomeLatestPost from './CyworldMiniHomeLatestPost';\r\n\r\nfunction CyworldMiniHome() {\r\n    const userInfo = useContext(UserInfo);\r\n    if (userInfo === null) {\r\n        return <Alert\r\n            message=\"Sign In\"\r\n            description=\"Please sign in to see your FB information in the homepage.\"\r\n            type=\"error\"\r\n            showIcon\r\n        />;\r\n    }\r\n    return (\r\n        <div style={{ border: '1px solid', borderRadius: '8px', backgroundColor: '#4ab5d6', padding: '24px' }}>\r\n            <div style={{ border: '1px dashed white', borderRadius: '16px', backgroundColor: '#4ab5d6', padding: '4px' }}>\r\n                <div style={{ border: '1px solid', borderRadius: '8px', backgroundColor: 'white', padding: '20px 10px' }}>\r\n                    <Row gutter={16}>\r\n                        <Col span={6}>\r\n                            <CyworldMiniHomeToday />\r\n                        </Col>\r\n                        <Col span={18}>\r\n                            <CyworldMiniHomeTitle />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={16}>\r\n                        <Col span={6}>\r\n                            <div style={{ border: '1px solid', borderRadius: '8px', backgroundColor: '#e6eeee', padding: '15px 10px' }}>\r\n                                <div style={{ border: '1px solid white', borderRadius: '8px', backgroundColor: 'white', padding: '10px 20px', minHeight: '700px' }}>\r\n                                    <CyworldMiniHomeLeftPanel />\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={18}>\r\n                            <div style={{ border: '1px solid', borderRadius: '8px', backgroundColor: 'white', padding: '10px 20px', minHeight: '732px' }}>\r\n                                <CyworldMiniHomeLatestPost />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CyworldMiniHome;","import React from 'react';\r\nimport { Button } from 'antd';\r\nimport FacebookLogin, { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\ntype Props = {\r\n  userInfo: ReactFacebookLoginInfo | null,\r\n  setUserInfo: (userInfo: ReactFacebookLoginInfo | null) => void,\r\n};\r\n\r\nfunction CyworldLogin(props: Props) {\r\n  const loginCallback = (userInfo: ReactFacebookLoginInfo) => {\r\n    props.setUserInfo(userInfo);\r\n  };\r\n\r\n  if (props.userInfo !== null) {\r\n    return (\r\n      <Button type=\"dashed\" onClick={() => { props.setUserInfo(null) }}>Log Out</Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FacebookLogin\r\n      appId=\"2600949710193273\"\r\n      autoLoad={false}\r\n      size=\"small\"\r\n      fields=\"name,picture\"\r\n      scope=\"public_profile,user_posts\"\r\n      textButton=\"Continue with Facebook\"\r\n      callback={loginCallback}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CyworldLogin;\r\n","import React, { useState } from 'react';\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\nimport { UserInfo } from './UserInfo';\nimport { Avatar, Layout, Menu } from 'antd';\nimport {\n  HomeOutlined,\n  UserOutlined,\n  LoginOutlined,\n  LogoutOutlined,\n  WarningOutlined,\n} from '@ant-design/icons';\nimport CyworldNavItem from './enum/CyworldNav';\nimport CyworldMiniHome from './CyworldMiniHome';\nimport CyworldLogin from './CyworldLogin';\n\nconst { Content, Footer, Sider } = Layout;\n\nfunction CyworldMain() {\n  const params = new URLSearchParams(window.location.search);\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n  const [menu, setMenu] = useState<string>(params.get('menu') ?? CyworldNavItem.HOMEPAGE);\n  const [userInfo, setUserInfo] = useState<ReactFacebookLoginInfo | null>(null);\n\n  let content = (\n    <UserInfo.Provider value={userInfo} >\n      <CyworldMiniHome />\n    </UserInfo.Provider>\n  );\n  if (menu === CyworldNavItem.LOGIN) {\n    content = (\n      <CyworldLogin userInfo={userInfo} setUserInfo={setUserInfo} />\n    );\n  } else if (menu === CyworldNavItem.PRIVACY) {\n    content = (\n      <>PRIVACY</>\n    );\n  }\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={setCollapsed}>\n        <Menu theme=\"dark\" onClick={(e) => {\n          setMenu(e.key);\n          params.set('menu', e.key);\n          window.history.replaceState({}, '', `${window.location.pathname}?${params}`);\n        }} defaultSelectedKeys={[menu]} mode=\"inline\" >\n          <div style={{ margin: '16px' }}>\n            {userInfo === null ?\n              <Avatar icon={<UserOutlined />} style={{ margin: '0 8px' }} /> :\n              <Avatar src={String(userInfo?.picture?.data?.url)} style={{ margin: '0 8px' }} />}\n            {!collapsed && `${userInfo === null ? 'Please sign in' : userInfo?.name}`}\n          </div>\n          <Menu.Item key={CyworldNavItem.HOMEPAGE} icon={<HomeOutlined />}>\n            Mini Homepage\n          </Menu.Item>\n          <Menu.Item key={CyworldNavItem.PRIVACY} icon={<WarningOutlined />}>\n            Privacy Policy\n          </Menu.Item>\n          <Menu.Item key={CyworldNavItem.LOGIN} icon={userInfo === null ? <LoginOutlined /> : <LogoutOutlined />}>\n            {`Sign ${userInfo === null ? 'In' : 'Out'}`}\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Content style={{\n          backgroundColor: '#737373',\n          backgroundSize: '20px 20px',\n          backgroundImage: 'linear-gradient(to right, #8b9192 1px, transparent 1px), linear-gradient(to bottom, #8b9192 1px, transparent 1px)',\n        }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n            {content}\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Created by Osmotically</Footer>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default CyworldMain;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport CyworldMain from './CyworldMain';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CyworldMain />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}