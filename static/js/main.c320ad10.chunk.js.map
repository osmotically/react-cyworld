{"version":3,"sources":["UserInfo.tsx","CyworldUser.tsx","CyworldLogin.tsx","CyworldMain.tsx","serviceWorker.ts","index.tsx"],"names":["UserInfo","createContext","CyworldUser","useState","posts","setposts","userInfo","useContext","length","FB","api","response","data","postMessages","map","post","key","id","message","src","String","picture","url","alt","name","CyworldLogin","props","onClick","setUserInfo","appId","autoLoad","size","fields","scope","callback","CyworldMain","className","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0PAGaA,G,MAAWC,wBAA6C,OCoCtDC,MApCf,WAAwB,IAAD,MACOC,mBAAiD,IADxD,mBACZC,EADY,KACLC,EADK,KAEbC,EAAWC,qBAAWP,GAC5B,GAAiB,OAAbM,EACA,OAAO,qDAGU,IAAjBF,EAAMI,QACNC,GAAGC,IACC,YACA,MACA,CAAE,OAAU,UAAW,MAAS,OAChC,SACIC,GAID,IAAD,EACEN,EAAQ,iBAACM,QAAD,IAACA,OAAD,EAACA,EAAUC,YAAX,QAAmB,OAKvC,IAAMC,EAAeT,EAAMU,KACvB,SAAAC,GAAI,OAAK,yBAAKC,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAME,IAAhB,OAAqBF,QAArB,IAAqBA,OAArB,EAAqBA,EAAMG,YAGxC,OACI,oCACI,yBAAKC,IAAKC,OAAM,OAACd,QAAD,IAACA,GAAD,UAACA,EAAUe,eAAX,iBAAC,EAAmBT,YAApB,aAAC,EAAyBU,KAAMC,IAAI,kBADxD,OAEKjB,QAFL,IAEKA,OAFL,EAEKA,EAAUkB,KACVX,I,gBCHEY,MAvBf,SAAsBC,GAKpB,OAAuB,OAAnBA,EAAMpB,SAEN,4BAAQqB,QAAS,WAAQD,EAAME,YAAY,QAA3C,WAKF,kBAAC,IAAD,CACEC,MAAM,mBACNC,UAAU,EACVC,KAAK,QACLC,OAAO,eACPC,MAAM,4BACNC,SAjBkB,SAAC5B,GACrBoB,EAAME,YAAYtB,OCYP6B,MAff,WAAwB,IAAD,EACWhC,mBAAwC,MADnD,mBACdG,EADc,KACJsB,EADI,KAGrB,OACE,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAc9B,SAAUA,EAAUsB,YAAaA,IAC/C,kBAAC5B,EAASqC,SAAV,CAAmBC,MAAOhC,GACxB,kBAAC,EAAD,UCHUiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtC,c","file":"static/js/main.c320ad10.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\nexport const UserInfo = createContext<ReactFacebookLoginInfo | null>(null);","import React, { useContext, useState } from 'react';\r\nimport { UserInfo } from './UserInfo';\r\n\r\nfunction CyworldUser() {\r\n    const [posts, setposts] = useState<Array<{ message: string, id: string }>>([]);\r\n    const userInfo = useContext(UserInfo);\r\n    if (userInfo === null) {\r\n        return <div>Please Log In First!</div>\r\n    }\r\n\r\n    if (posts.length === 0) {\r\n        FB.api(\r\n            '/me/posts',\r\n            'get',\r\n            { \"fields\": \"message\", \"limit\": \"10\" },\r\n            function (\r\n                response: {\r\n                    data: Array<{ message: string, id: string }>,\r\n                    page: { next: string, previous: string },\r\n                },\r\n            ) {\r\n                setposts(response?.data ?? []);\r\n            }\r\n        );\r\n    }\r\n\r\n    const postMessages = posts.map(\r\n        post => (<div key={post?.id}>{post?.message}</div>),\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <img src={String(userInfo?.picture?.data?.url)} alt=\"profile_image\" />\r\n            {userInfo?.name}\r\n            {postMessages}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CyworldUser;","import React from 'react';\r\nimport FacebookLogin, { ReactFacebookLoginInfo } from 'react-facebook-login';\r\n\r\ntype Props = {\r\n  userInfo: ReactFacebookLoginInfo | null,\r\n  setUserInfo: (userInfo: ReactFacebookLoginInfo | null) => void,\r\n};\r\n\r\nfunction CyworldLogin(props: Props) {\r\n  const loginCallback = (userInfo: ReactFacebookLoginInfo) => {\r\n    props.setUserInfo(userInfo);\r\n  };\r\n\r\n  if (props.userInfo !== null) {\r\n    return (\r\n      <button onClick={() => { props.setUserInfo(null) }}>Log Out</button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FacebookLogin\r\n      appId=\"2600949710193273\"\r\n      autoLoad={false}\r\n      size=\"small\"\r\n      fields=\"name,picture\"\r\n      scope=\"public_profile,user_posts\"\r\n      callback={loginCallback}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CyworldLogin;\r\n","import React, { useState } from 'react';\nimport { ReactFacebookLoginInfo } from 'react-facebook-login';\nimport './App.css';\nimport { UserInfo } from './UserInfo';\nimport CyworldUser from './CyworldUser';\nimport CyworldLogin from './CyworldLogin';\n\nfunction CyworldMain() {\n  const [userInfo, setUserInfo] = useState<ReactFacebookLoginInfo | null>(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CyworldLogin userInfo={userInfo} setUserInfo={setUserInfo} />\n        <UserInfo.Provider value={userInfo} >\n          <CyworldUser />\n        </UserInfo.Provider>\n      </header>\n    </div>\n  );\n}\n\nexport default CyworldMain;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CyworldMain from './CyworldMain';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CyworldMain />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}